# 🦌 CREA SELEAPP-CA17 PER LA CACCIA DI SELEZIONE – TUTTO IN UN COMANDO

npx create-next-app@latest seleapp-ca17 --typescript --tailwind --eslint --app && \
cd seleapp-ca17 && \
npm install drizzle-orm pg zod jsonwebtoken bcryptjs react-hook-form date-fns && \
mkdir db utils lib && \
echo 'import { pgTable, uuid, text, boolean, timestamp } from "drizzle-orm/pg-core";

export const reserves = pgTable("reserves", {
  id: uuid("id").primaryKey().defaultRandom(),
  name: text("name").notNull(),
  isZPS: boolean("is_zps").default(false),
  regolamentoUrl: text("regolamento_url")
});

export const users = pgTable("users", {
  id: uuid("id").primaryKey().defaultRandom(),
  name: text("name").notNull(),
  email: text("email").notNull(),
  password: text("password").notNull(),
  role: text("role").default("HUNTER"),
  reserveId: uuid("reserve_id").references(() => reserves.id),
  isSelezionatore: boolean("is_selezionatore").default(false),
  isEsperto: boolean("is_esperto").default(false),
  partecipatoCensimenti: boolean("partecipato_censimenti").default(false),
  isOspite: boolean("is_ospite").default(false),
  accompagnato: boolean("accompagnato").default(true),
  usciteSettimana: text("uscite_sett").default("[]")
});

export const prelievi = pgTable("prelievi", {
  id: uuid("id").primaryKey().defaultRandom(),
  userId: uuid("user_id").references(() => users.id),
  specie: text("specie"),
  classe: text("classe"),
  data: timestamp("data"),
  zona: text("zona"),
  colpoVano: boolean("colpo_vano").default(false),
  fascetta: text("fascetta"),
  fotoUrl: text("foto_url")
});
' > db/schema.ts && \

echo 'export function generaListaEstrazione(partecipanti) {
  const priorita21 = partecipanti.filter(u => u.isSelezionatore && u.isEsperto && u.partecipatoCensimenti);
  const priorita22 = partecipanti.filter(u => (u.isSelezionatore || u.role === "HUNTER") && !priorita21.includes(u));
  const priorita23 = partecipanti.filter(u => u.isOspite);

  const mescola = arr => arr.sort(() => 0.5 - Math.random());

  return [...mescola(priorita21), ...mescola(priorita22), ...mescola(priorita23)];
}
' > utils/estrazione.ts && \

echo 'export function verificaPrenotazione({ utente, giorno, specie, classe, storico, isZPS }) {
  const d = new Date(giorno);
  const day = d.getDay(); // 0=Dom, 1=Lun...6=Sab
  const mese = d.getMonth();

  const postSettembre = mese >= 8;
  const giorniZPS = [3, 6, 0];
  const giorniNormali = [1, 4];

  if (postSettembre && !giorniNormali.includes(day)) return false;
  if (!postSettembre && isZPS && !giorniZPS.includes(day)) return false;
  if (!postSettembre && !isZPS && !giorniNormali.includes(day)) return false;

  if (!utente.isSelezionatore && !utente.accompagnato) return false;
  if (utente.isOspite && !utente.accompagnato) return false;

  const vietati = storico.filter(p =>
    (p.specie === "Capriolo" && p.classe === "M2" && specie === "Cervo" && ["M1", "M2/3", "M4"].includes(classe)) ||
    (p.specie === "Capriolo" && p.classe === "M2" && classe === "M2") ||
    (p.specie === "Cervo" && ["M1", "M2/3", "M4"].includes(p.classe) && specie === "Cervo" && ["M1", "M2/3", "M4"].includes(classe))
  );
  if (vietati.length > 0) return false;

  return true;
}
' > utils/verificaPrenotazione.ts && \

echo 'export default function Dashboard() {
  return (
    <main className="p-6 space-y-4">
      <h1 className="text-2xl font-bold">Benvenuto in SeleApp – CA17 Pederobba</h1>
      <ul className="list-disc pl-6 space-y-2">
        <li>📅 Visualizza giorni disponibili per l\'uscita</li>
        <li>🎯 Prenota la tua uscita settimanale</li>
        <li>📝 Registra un prelievo o colpo a vuoto</li>
        <li>📜 Consulta il regolamento della riserva</li>
        <li>📈 Verifica il tuo storico e i blocchi attivi</li>
      </ul>
    </main>
  );
}
' > app/page.tsx && \

echo "✅ Progetto creato con successo. Ora apri Replit, imposta DB PostgreSQL e crea le API."
