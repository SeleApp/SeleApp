üß± Stack tecnico:
- Frontend: React + TypeScript + Tailwind CSS + shadcn/ui + Vite + manifest PWA
- Backend: Node.js + Express + TypeScript
- Database: PostgreSQL (Drizzle ORM)
- Autenticazione: JWT con ruoli (HUNTER, ADMIN)

üéØ Requisiti funzionali:
- Due ruoli utente: cacciatori e amministratori
- Le **zone di caccia sono 16**
- Il cacciatore pu√≤ **prenotare una sola zona per ciascuna fascia oraria (mattina o pomeriggio)** ogni giorno
- La caccia √® permessa solo da **luned√¨ a domenica**, **esclusi marted√¨ e venerd√¨** (silenzio venatorio)
- Ogni zona pu√≤ essere prenotata da un solo cacciatore per fascia oraria
- I capi selezionabili sono **solo caprioli e cervi**, con sesso e classe (maschio/femmina, adulto/giovane)
- Il sistema deve nascondere o bloccare prenotazioni se le quote disponibili sono esaurite
- Dopo il prelievo, il capo va rimosso dalla lista disponibile

üì¶ Backend:
1. Crea `server/index.ts` con Express che serve anche i file statici Vite
2. Crea `server/db.ts` con configurazione Drizzle ORM + PostgreSQL
3. Crea `shared/schema.ts` con tabelle: Hunters, Zones, Reservations, Reports, Wildlife
4. Crea seed iniziale con 16 zone, e capi (caprioli/cervi) con sesso e classe
5. Implementa `routes/reservations.ts` con controlli:
   - Blocca prenotazioni in giorni di silenzio venatorio
   - Impedisce doppie prenotazioni per stessa fascia oraria
   - Impedisce prenotazioni su zone gi√† occupate
   - Aggiorna le quote dopo conferma di un prelievo
6. Aggiungi middleware `auth.ts` con verifica JWT e ruoli

üì¶ Frontend:
1. Crea `client/` con Vite, React, Tailwind CSS
2. Crea pagine: LoginPage, HunterDashboard, AdminDashboard
3. Componenti: ZoneCard, ReservationModal, ReportModal
4. Aggiungi manifest.json e service-worker.js funzionanti
5. Rendila PWA installabile su iOS/Android
6. Ottimizza tutto per over 50 (font grandi, pulsanti chiari, flusso semplificato)

üìé Bonus:
- Esporta PDF modulo uscita da prenotazione (`generateHuntPDF`)
- Invia PDF via email se utente √® abilitato ULSS (`sendToULSS`)
- Mostra lo stato quota (üü¢ disponibile, üü° bassa, üî¥ esaurita)
- Aggiungi sistema notifiche (interno + webhook email/WhatsApp se possibile)

‚ö†Ô∏è Scrivi i file solo se necessari. Commenta ogni parte. Ottimizza per funzionare **subito in Replit** con database persistente. Nessun setup esterno. Evita codice ridondante.

Aiutami a generare tutto il necessario per partire, a partire da backend e database. Grazie.